#pragma once
#include <string>

class Matrix
{
private:
	// Хранит кол-во строк в матрице
	int rowsCount;
	// Хранит кол-во столбцов в матрице 
	int columnsCount;

	// Двумерный динамический массив для хранения данных матрицы
	int** data;

	// Переменная будет хранить уникальный id матрицы
	unsigned int id;

	// Статическая переменная для того чтобы генерировать уникальный id 
	// (общая переменная для всех объектов класса)
	static unsigned int idCounter;

public:
	// Конструктор по умолчанию
	// Создаёт матрицу 3х3 и заполняет её нулями.
	Matrix();

	// Конструктор с параметрами
	// Создаёт матрицу columnsCount х rowsCount и заполняет её нулями
	// Количество строк и столбцов всегда должно быть больше 0 
	Matrix(int columnsCount, int rowsCount);

	// Конструктор копирования
	// Создаёт матрицу идентичную переданной
	Matrix(const Matrix&);

	// Деструктор
	// Освобождает всю выделенную память для данных матрицы
	~Matrix();

	// Метод возвращает количество строкв матрице
	int RowsCount();
	// Метод возвращает количество столбцов в матрице
	int ColumnsCount();

	// Возвращает значение элемента матрицы по заданным столбцу и строке
	int GetValue(int column, int row);

	// Заменяет значение элемента матрицы по заданным столбцу и строке на значение value
	bool SetValue(int column, int row, int value);

	// Возвращает строковое представление матрицы
	std::string ToString();

	// Сортирует заданную строку.
	void SortRow(int row);
	// Сортирует заданный столбец.
	void SortColumn(int column);

	// Возвращает уникальный id матрицы
	int Id();

};

