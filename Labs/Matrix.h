#pragma once
#include <string>
#include <fstream>
#include <iostream>

class Matrix
{
private:
	// Хранит кол-во строк в матрице
	int rowsCount;
	// Хранит кол-во столбцов в матрице 
	int columnsCount;

	// Двумерный динамический массив для хранения данных матрицы
	int** data;

	// Переменная будет хранить уникальный id матрицы
	unsigned int id;

	// Статическая переменная для того чтобы генерировать уникальный id 
	// (общая переменная для всех объектов класса)
	static unsigned int idCounter;

public:
	// Конструктор по умолчанию
	// Создаёт матрицу 3х3 и заполняет её нулями.
	Matrix();

	// Конструктор с параметрами
	// Создаёт матрицу columnsCount х rowsCount и заполняет её нулями
	// Количество строк и столбцов всегда должно быть больше 0 
	Matrix(int columnsCount, int rowsCount);

	// Конструктор копирования
	// Создаёт матрицу идентичную переданной
	Matrix(const Matrix&);

	// Деструктор
	// Освобождает всю выделенную память для данных матрицы
	~Matrix();

	// Метод возвращает количество строкв матрице
	int RowsCount();
	// Метод возвращает количество столбцов в матрице
	int ColumnsCount();

	// Возвращает значение элемента матрицы по заданным столбцу и строке
	int GetValue(int column, int row);

	// Заменяет значение элемента матрицы по заданным столбцу и строке на значение value
	bool SetValue(int column, int row, int value);

	// Возвращает строковое представление матрицы
	std::string ToString();

	// Сортирует заданную строку.
	void SortRow(int row);
	// Сортирует заданный столбец.
	void SortColumn(int column);

	// Возвращает уникальный id матрицы
	int Id();

	// Перегрузка оператора присваивания
	// Осуществляет проверку на самокопирование (Matrix a; a = a;)
	// Если объект не равен сам себе, то копирует данные из переданного объкта
	Matrix& operator=(const Matrix& obj);

	// Дружественная функция(не является членом класса, но имеет доступ к его приватным полям)
	// Перегрузка оператора сложения
	// Осущствляет проверку на соответствие размерностей
	// Если размерности не соответствуют,
	// То возвращает матрицу созданную конструктором по умолчанию
	// Иначе производит операцию сложения матриц
	// Возвращает матрицу равную сумме переданных
	friend Matrix operator+(const Matrix& obj1, const Matrix& obj2);

	// Дружественная функция(не является членом класса, но имеет доступ к его приватным полям)
	// Перегрузка оператора разницы
	// Осущствляет проверку на соответствие размерностей
	// Если размерности не соответствуют,
	// То возвращает матрицу созданную конструктором по умолчанию
	// Иначе производит операцию разницы матриц
	// Возвращает матрицу равную разнице переданных
	friend Matrix operator-(const Matrix& obj1, const Matrix& obj2);

	// Оператор индексирования
	// Получает на вход индекс
	// Возвращает ссылку на элемент матрицы
	// Который находится по данному индексу в однострочном представлении матрицы
	// Так индекс 4 возвратит элемент (1,1), матрицы 3*3
	int& operator[](int i);

	// Оператор вызова функции
	// Параметры столбец, строка, значение
	// Выполняет функцию SetValue
	bool operator()(int column, int row, int value);

	// Перегрузка дружественных потоковых операторов

	// Потоковый оператор вывода
	friend std::ostream& operator<<(std::ostream& os, const Matrix& obj);
	// Потоковый оператор ввода
	friend std::istream& operator>>(std::istream& is, Matrix& obj);
	// Файловый потоковый оператор вывода
	friend std::ofstream& operator<<(std::ofstream& ofs, const Matrix& obj);
	// Файловый потоковый оператор ввода
	friend std::ifstream& operator>>(std::ifstream& ifs, Matrix& obj);

	// Сохранение матрицы в файл в бинарном виде
	bool serialize(const char* path);
	// Загрузка матрицы из файла в бинарном виде
	bool deserialize(const char* path);
};

